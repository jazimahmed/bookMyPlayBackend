generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PLAYER
  OWNER
  ADMIN
}

model User {
  id       String  @id @default(uuid())
  name     String
  phone    String  @unique
  otp      String?
  role     Role    @default(PLAYER)
  isActive Boolean @default(false)

  owner     Owner?
  wallet    Wallet?
  bookings  Booking[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Owner {
  id         String  @id @default(uuid())
  uId        String  @unique
  nic        String
  profilePic String?
  bio        String?
  bankAcc    String?
  bankName   String?
  bankCode   String?
  isActive   Boolean @default(false)

  user      User     @relation(fields: [uId], references: [id])
  grounds   Ground[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wallet {
  id            String @id @default(uuid())
  uId           String @unique
  totalAmount   Float  @default(0)
  blockedAmount Float  @default(0)
  balance       Float  @default(0)

  user User @relation(fields: [uId], references: [id])
}

model Ground {
  id          String  @id @default(uuid())
  name        String
  desc        String?
  capacity    Int?
  surfaceType String?
  status      String  @default("pending") // pending, approved, rejected
  isVerified  Boolean @default(false)
  ownerId     String

  owner     Owner     @relation(fields: [ownerId], references: [id])
  slots     Slot[]
  bookings  Booking[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Slot {
  id        String @id @default(uuid())
  day       String // e.g., Monday
  startTime String // e.g., "08:00"
  endTime   String // e.g., "10:00"
  rate      Float
  groundId  String

  ground   Ground    @relation(fields: [groundId], references: [id])
  bookings Booking[]
}

model Booking {
  id       String @id @default(uuid())
  userId   String
  groundId String
  slotId   String
  amount   Float
  status   String @default("booked") // booked, cancelled, completed
  type     String @default("online") // online, offline

  user      User     @relation(fields: [userId], references: [id])
  ground    Ground   @relation(fields: [groundId], references: [id])
  slot      Slot     @relation(fields: [slotId], references: [id])
  createdAt DateTime @default(now())
}

model File {
  id              String   @id @default(uuid())
  fileUrl         String
  type            String // e.g., profile_pic, nic_front, nic_back
  relatedEntity   String // e.g., "owner", "ground"
  relatedEntityId String // UUID of Owner or Ground
  uploadedAt      DateTime @default(now())
}
